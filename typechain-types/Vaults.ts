/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface VaultsInterface extends utils.Interface {
  functions: {
    "claimVault(uint256)": FunctionFragment;
    "closeVault(uint256)": FunctionFragment;
    "createGrant(address,uint256,address,uint256)": FunctionFragment;
    "numVaults()": FunctionFragment;
    "vaults(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimVault"
      | "closeVault"
      | "createGrant"
      | "numVaults"
      | "vaults"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimVault",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeVault",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGrant",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "numVaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "claimVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {
    "ClaimVault(uint256,uint256,address)": EventFragment;
    "CloseVault(uint256)": EventFragment;
    "CreateVault(uint256,address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVault"): EventFragment;
}

export interface ClaimVaultEventObject {
  _id: BigNumber;
  _claimTimestamp: BigNumber;
  _claimer: string;
}
export type ClaimVaultEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ClaimVaultEventObject
>;

export type ClaimVaultEventFilter = TypedEventFilter<ClaimVaultEvent>;

export interface CloseVaultEventObject {
  _id: BigNumber;
}
export type CloseVaultEvent = TypedEvent<[BigNumber], CloseVaultEventObject>;

export type CloseVaultEventFilter = TypedEventFilter<CloseVaultEvent>;

export interface CreateVaultEventObject {
  _id: BigNumber;
  _token: string;
  _amount: BigNumber;
  recipient: string;
  _unlockTimestamp: BigNumber;
}
export type CreateVaultEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber],
  CreateVaultEventObject
>;

export type CreateVaultEventFilter = TypedEventFilter<CreateVaultEvent>;

export interface Vaults extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGrant(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      unlockTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numVaults(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, boolean] & {
        token: string;
        amount: BigNumber;
        unlockTimestamp: BigNumber;
        recipient: string;
        closed: boolean;
      }
    >;
  };

  claimVault(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeVault(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGrant(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    unlockTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numVaults(overrides?: CallOverrides): Promise<BigNumber>;

  vaults(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, boolean] & {
      token: string;
      amount: BigNumber;
      unlockTimestamp: BigNumber;
      recipient: string;
      closed: boolean;
    }
  >;

  callStatic: {
    claimVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createGrant(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      unlockTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numVaults(overrides?: CallOverrides): Promise<BigNumber>;

    vaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, boolean] & {
        token: string;
        amount: BigNumber;
        unlockTimestamp: BigNumber;
        recipient: string;
        closed: boolean;
      }
    >;
  };

  filters: {
    "ClaimVault(uint256,uint256,address)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _claimTimestamp?: null,
      _claimer?: null
    ): ClaimVaultEventFilter;
    ClaimVault(
      _id?: PromiseOrValue<BigNumberish> | null,
      _claimTimestamp?: null,
      _claimer?: null
    ): ClaimVaultEventFilter;

    "CloseVault(uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null
    ): CloseVaultEventFilter;
    CloseVault(
      _id?: PromiseOrValue<BigNumberish> | null
    ): CloseVaultEventFilter;

    "CreateVault(uint256,address,uint256,address,uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _token?: null,
      _amount?: null,
      recipient?: null,
      _unlockTimestamp?: null
    ): CreateVaultEventFilter;
    CreateVault(
      _id?: PromiseOrValue<BigNumberish> | null,
      _token?: null,
      _amount?: null,
      recipient?: null,
      _unlockTimestamp?: null
    ): CreateVaultEventFilter;
  };

  estimateGas: {
    claimVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGrant(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      unlockTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numVaults(overrides?: CallOverrides): Promise<BigNumber>;

    vaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGrant(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      unlockTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
