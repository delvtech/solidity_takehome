/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Grant {
  export type GrantStructStruct = {
    token: PromiseOrValue<string>;
    unlockTime: PromiseOrValue<BigNumberish>;
    claimedOrRevoked: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    inSwap: PromiseOrValue<boolean>;
  };

  export type GrantStructStructOutput = [
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean
  ] & {
    token: string;
    unlockTime: BigNumber;
    claimedOrRevoked: boolean;
    amount: BigNumber;
    inSwap: boolean;
  };
}

export interface GrantInterface extends utils.Interface {
  functions: {
    "ImFeelingLucky()": FunctionFragment;
    "addToLuckySwap()": FunctionFragment;
    "checkGrantAmount()": FunctionFragment;
    "checkGrantClaimedOrRevoked()": FunctionFragment;
    "checkGrantUnlockTime()": FunctionFragment;
    "claim()": FunctionFragment;
    "deposit(address,uint256,address,uint256)": FunctionFragment;
    "grants(address)": FunctionFragment;
    "revoke(address)": FunctionFragment;
    "swapsLen()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ImFeelingLucky"
      | "addToLuckySwap"
      | "checkGrantAmount"
      | "checkGrantClaimedOrRevoked"
      | "checkGrantUnlockTime"
      | "claim"
      | "deposit"
      | "grants"
      | "revoke"
      | "swapsLen"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ImFeelingLucky",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToLuckySwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkGrantAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkGrantClaimedOrRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkGrantUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grants",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "swapsLen", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ImFeelingLucky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToLuckySwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkGrantAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkGrantClaimedOrRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkGrantUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grants", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapsLen", data: BytesLike): Result;

  events: {
    "GrantAddedToSwap(address)": EventFragment;
    "GrantClaimed(tuple)": EventFragment;
    "GrantDeposited(address,address,uint256,uint256)": EventFragment;
    "GrantRevoked(tuple)": EventFragment;
    "SwapOccured(tuple,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GrantAddedToSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapOccured"): EventFragment;
}

export interface GrantAddedToSwapEventObject {
  recipient: string;
}
export type GrantAddedToSwapEvent = TypedEvent<
  [string],
  GrantAddedToSwapEventObject
>;

export type GrantAddedToSwapEventFilter =
  TypedEventFilter<GrantAddedToSwapEvent>;

export interface GrantClaimedEventObject {
  grant: Grant.GrantStructStructOutput;
}
export type GrantClaimedEvent = TypedEvent<
  [Grant.GrantStructStructOutput],
  GrantClaimedEventObject
>;

export type GrantClaimedEventFilter = TypedEventFilter<GrantClaimedEvent>;

export interface GrantDepositedEventObject {
  token: string;
  recipient: string;
  amount: BigNumber;
  unlockTime: BigNumber;
}
export type GrantDepositedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  GrantDepositedEventObject
>;

export type GrantDepositedEventFilter = TypedEventFilter<GrantDepositedEvent>;

export interface GrantRevokedEventObject {
  grant: Grant.GrantStructStructOutput;
}
export type GrantRevokedEvent = TypedEvent<
  [Grant.GrantStructStructOutput],
  GrantRevokedEventObject
>;

export type GrantRevokedEventFilter = TypedEventFilter<GrantRevokedEvent>;

export interface SwapOccuredEventObject {
  swapper: Grant.GrantStructStructOutput;
  reciever: Grant.GrantStructStructOutput;
}
export type SwapOccuredEvent = TypedEvent<
  [Grant.GrantStructStructOutput, Grant.GrantStructStructOutput],
  SwapOccuredEventObject
>;

export type SwapOccuredEventFilter = TypedEventFilter<SwapOccuredEvent>;

export interface Grant extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GrantInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ImFeelingLucky(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToLuckySwap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkGrantAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkGrantClaimedOrRevoked(overrides?: CallOverrides): Promise<[boolean]>;

    checkGrantUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      unlockTime: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grants(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber, boolean] & {
        token: string;
        unlockTime: BigNumber;
        claimedOrRevoked: boolean;
        amount: BigNumber;
        inSwap: boolean;
      }
    >;

    revoke(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapsLen(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ImFeelingLucky(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToLuckySwap(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkGrantAmount(overrides?: CallOverrides): Promise<BigNumber>;

  checkGrantClaimedOrRevoked(overrides?: CallOverrides): Promise<boolean>;

  checkGrantUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    token: PromiseOrValue<string>,
    unlockTime: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grants(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber, boolean] & {
      token: string;
      unlockTime: BigNumber;
      claimedOrRevoked: boolean;
      amount: BigNumber;
      inSwap: boolean;
    }
  >;

  revoke(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapsLen(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ImFeelingLucky(overrides?: CallOverrides): Promise<void>;

    addToLuckySwap(overrides?: CallOverrides): Promise<void>;

    checkGrantAmount(overrides?: CallOverrides): Promise<BigNumber>;

    checkGrantClaimedOrRevoked(overrides?: CallOverrides): Promise<boolean>;

    checkGrantUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    deposit(
      token: PromiseOrValue<string>,
      unlockTime: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    grants(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber, boolean] & {
        token: string;
        unlockTime: BigNumber;
        claimedOrRevoked: boolean;
        amount: BigNumber;
        inSwap: boolean;
      }
    >;

    revoke(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapsLen(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "GrantAddedToSwap(address)"(recipient?: null): GrantAddedToSwapEventFilter;
    GrantAddedToSwap(recipient?: null): GrantAddedToSwapEventFilter;

    "GrantClaimed(tuple)"(grant?: null): GrantClaimedEventFilter;
    GrantClaimed(grant?: null): GrantClaimedEventFilter;

    "GrantDeposited(address,address,uint256,uint256)"(
      token?: null,
      recipient?: null,
      amount?: null,
      unlockTime?: null
    ): GrantDepositedEventFilter;
    GrantDeposited(
      token?: null,
      recipient?: null,
      amount?: null,
      unlockTime?: null
    ): GrantDepositedEventFilter;

    "GrantRevoked(tuple)"(grant?: null): GrantRevokedEventFilter;
    GrantRevoked(grant?: null): GrantRevokedEventFilter;

    "SwapOccured(tuple,tuple)"(
      swapper?: null,
      reciever?: null
    ): SwapOccuredEventFilter;
    SwapOccured(swapper?: null, reciever?: null): SwapOccuredEventFilter;
  };

  estimateGas: {
    ImFeelingLucky(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToLuckySwap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkGrantAmount(overrides?: CallOverrides): Promise<BigNumber>;

    checkGrantClaimedOrRevoked(overrides?: CallOverrides): Promise<BigNumber>;

    checkGrantUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      unlockTime: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grants(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revoke(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapsLen(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ImFeelingLucky(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToLuckySwap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkGrantAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkGrantClaimedOrRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkGrantUnlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      unlockTime: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grants(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revoke(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapsLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
